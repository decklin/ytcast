#!/usr/bin/env ruby

require 'optparse'
require 'net/http'
require 'cgi'
require 'simple_upnp'
require 'nokogiri'
require 'faye/websocket'
require 'eventmachine'
require 'json'

RETRY_DELAY = 5
INFO_DELAY = 10
DEBUG_DELAY = 5

RAMP_STATE_IDLE = 0
RAMP_STATE_STOP = 1
RAMP_STATE_PLAY = 2

def yt_video_id(str)
  case str
  when /^https?:\/\/youtu\.be\//
    URI.parse(str).path.sub('/', '')
  when /^https?:\/\/((www|m)\.)?youtube\.com\/embed\//
    URI.parse(str).path.sub('/embed/', '')
  when /^https?:\/\/((www|m)\.)?youtube\.com\/v\//
    URI.parse(str).path.sub('/v/', '')
  when /^https?:\/\/((www|m)\.)?youtube\.com\/watch\?/, /^\/watch\?/
    CGI.parse(URI.parse(str).query)['v'].first
  when /^[\w-]{11}$/
    str
  else
    nil
  end
end

name = nil
host = nil
port = 8008
mode = :load
debug = false
cmd_type = nil
cmd_args = {}

opts = OptionParser.new do |opts|
  opts.banner = 'ytcast [options] VIDEO_ID_OR_URL'
  opts.on('-?', '--help') do
    puts opts
    exit
  end
  opts.on('-N', '--name DEVICE') do |arg|
    name = arg
  end
  opts.on('-H', '--host HOST') do |arg|
    host = arg
  end
  opts.on('-P', '--port PORT') do |arg|
    port = arg
  end
  opts.on('-I', '--info') do
    mode = :info
  end
  opts.on('-D', '--debug') do
    debug = true
  end
  opts.on('-q', '--quit') do
    mode = :quit
  end
  # This doesn't work yet, so it's not documented... {"error": {"domain": "YouTube.MDx", "code": 1}}
  opts.on('-l', '--load URL') do |arg|
    mode = :command
    cmd_type = 'LOAD'
    cmd_args = { title: 'unknown', src: arg, autoplay: false }
  end
  opts.on('-v', '--volume N') do |arg|
    mode = :command
    cmd_type = 'VOLUME'
    cmd_args = { volume: arg.to_f / 100 }
  end
  opts.on('-m', '--mute') do |arg|
    mode = :command
    cmd_type = 'VOLUME'
    cmd_args = { muted: true }
  end
  opts.on('-u', '--unmute') do |arg|
    mode = :command
    cmd_type = 'VOLUME'
    cmd_args = { muted: false }
  end
  opts.on('-p', '--pause') do
    mode = :command
    cmd_type = 'STOP'
  end
  opts.on('-r', '--resume') do
    mode = :command
    cmd_type = 'PLAY'
  end
  opts.on('-s', '--seek POS') do |arg|
    mode = :command
    if arg =~ /^(\d+):([\d.]+)$/
      pos = $1.to_i * 60 + $2.to_f
    else
      pos = arg.to_f
    end
    cmd_type = 'PLAY'
    cmd_args = { position: pos }
  end
  opts.on('-S', '--status') do
    mode = :status
  end
  opts.on('-w', '--wait') do
    mode = :wait
  end
end
opts.parse!

if mode == :load
  video_id = yt_video_id(ARGV.shift)
  unless video_id
    STDERR.puts opts
    exit 2
  end
end

class ChromecastTube
  def initialize(name, host, port, debug)
    @host = host
    @port = port
    @path = '/apps/YouTube'
    @debug = debug
    @cmd_id = 0
    until @host && @port
      # The simple_upnp API is a bit weird: #find should be called #each, and #to_json should be called #to_h.
      SimpleUpnp::Discovery.find do |device|
        dev_info = device.to_json(true) # not actually JSON
        dev_type = dev_info['root']['device']['deviceType'] rescue nil
        if dev_type && dev_type.start_with?('urn:dial-multiscreen-org:')
          friendly_name = dev_info['root']['device']['friendlyName'] rescue nil
          if name.nil? || friendly_name == name
            base_uri = URI.parse(dev_info['root']['URLBase']) rescue nil
            if base_uri
              puts "discovered #{friendly_name}" + (@debug ? " at #{base_uri}" : '')
              @host = base_uri.host
              @port = base_uri.port
              break
            end
          end
        end
      end
      unless @host && @port
        puts "no device discovered (yet), retrying..."
        sleep RETRY_DELAY
      end
    end
  end
  def http_client
    Net::HTTP.new(@host, @port)
  end
  def get_info
    http_client.get(@path).body
  end
  def launch(data = nil)
    res = http_client.post(@path, data)
    res.code == '201'
  end
  def create_session
    # It doesn't seem to matter what you post to this endpoint, just that it's JSON.
    # Some examples set {"channel": 0, "senderId": {"appName": "Chromecast", "senderId": "..."}}
    Net::HTTP.new(@svc_uri.host, @svc_uri.port).post(@svc_uri.path, '{}', 'Content-Type' => 'application/json').body
  end
  def quit
    res = http_client.delete(@path)
    res.code == '200'
  end
  def open_ramp_websocket(&blk)
    begin
      until @svc_uri
        info = Nokogiri::XML(get_info)
        svc_elt = info.xpath('/dial:service/chrome:servicedata/chrome:connectionSvcURL',
                             'dial' => 'urn:dial-multiscreen-org:schemas:dial',
                             'chrome' => 'urn:chrome.google.com:cast')
        # When the app is starting up, there's a <servicedata> elemement but it's empty.
        if svc_elt.text.empty?
          puts 'no app session service found (yet), retrying...'
          sleep RETRY_DELAY
        else
          @svc_uri = URI.parse(svc_elt.text)
        end
      end
      session = JSON.parse(create_session)['URL']
      puts "connecting to app via #{session}" if @debug
      EM.run do
        @ws = Faye::WebSocket::Client.new(session)
        # Leave some state around here so we can print a noisier message on unexpected close. TODO: remove?
        @wanted_to_close = false
        @ws.on :close do |event|
          puts 'connection closed' + (@wanted_to_close ? '' : " unexpectedly: code #{event.code}, reason #{event.reason.inspect}")
          exit
        end
        # I have not run into this yet.
        @ws.on :error do |event|
          puts "protocol error: #{event.message}"
          exit 1
        end
        instance_eval(&blk)
      end
    rescue => err
      STDERR.puts "connection error: #{err}"
      exit 1
    end
  end
  def ramp_send(cmd_type, params={})
    @cmd_id += 1
    cmd = JSON.generate(['ramp', {'type' => cmd_type, 'cmd_id' => @cmd_id}.merge(params)])
    puts "sending: #{cmd}" if @debug
    @ws.send(cmd)
  end
  def ramp_close
    puts 'closing connection' if @debug
    @wanted_to_close = true
    @ws.close
  end
  def parse_ramp_msg(raw, &blk)
    data = JSON.parse(raw)
    if data.is_a?(Array) && data[0] == 'ramp'
      puts "received RAMP message: #{data[1]}" if @debug
      blk.call(data[1])
    else
      puts "received non-RAMP message, ignoring: #{raw}"
    end
  end
  def display_status(status)
    state_name = case status['state']
                 when RAMP_STATE_PLAY; 'playing'
                 when RAMP_STATE_STOP; 'paused'
                 when RAMP_STATE_IDLE; 'idle'
                 else; 'unknown'
                 end
    "#{state_name}: #{fmt_t(status['current_time'])} of #{fmt_t(status['duration'])} (vol #{(status['volume']*100).round}%): #{status['title']}"
  end
  def fmt_t(secs)
    secs ? '%d:%04.1f' % [secs / 60, secs % 60] : '?'
  end
end

tube = ChromecastTube.new(name, host, port, debug)

case mode
when :load
  if tube.launch(URI.encode_www_form(v: video_id))
    puts "launched app with video ID #{video_id}"
  else
    puts 'error launching app (bad video?)'
  end
when :info
  puts tube.get_info
when :quit
  unless tube.quit
    puts 'error quitting app (not running?)'
  end
when :status
  tube.open_ramp_websocket do
    # We'll get a status message automatically when we open the connection.
    @ws.on :message do |event|
      parse_ramp_msg(event.data) do |msg|
        puts display_status(msg['status'])
        ramp_close
      end
    end
  end
when :command
  tube.open_ramp_websocket do
    @ws.on :open do |event|
      puts "sending #{cmd_type} command"
      ramp_send(cmd_type, cmd_args)
      if debug
        @saved_id = @cmd_id
      else
        ramp_close
      end
    end
    if debug
      @ws.on :message do |event|
        parse_ramp_msg(event.data) do |msg|
          if msg['cmd_id'] == @saved_id
            puts 'got a response matching the command'
            ramp_close
          end
        end
      end
      EM::Timer.new(DEBUG_DELAY) do
        puts 'no response, giving up'
        ramp_close
      end
    end
  end
when :wait
  tube.open_ramp_websocket do
    # This isn't strictly necessary, (we'll get a 'STATUS' message on state changes), but it's nice to have some updates.
    EM::PeriodicTimer.new(INFO_DELAY) do
      ramp_send('INFO')
    end
    has_ever_been_playing = false
    @ws.on :message do |event|
      parse_ramp_msg(event.data) do |msg|
        status = msg['status']
        puts display_status(status)
        if status['state'] == RAMP_STATE_PLAY
          has_ever_been_playing = true
        elsif has_ever_been_playing && (status['state'] == RAMP_STATE_IDLE || status['current_time'] == 0)
          puts 'finished playing'
          ramp_close
        end
      end
    end
  end
end
